import{_ as a,c as s,o as t,V as e}from"./chunks/framework.e5c4830d.js";const y=JSON.parse('{"title":"start","description":"","frontmatter":{},"headers":[],"relativePath":"src/web3/rust/start.md","filePath":"src/web3/rust/start.md"}'),r={name:"src/web3/rust/start.md"},n=e(`<h1 id="start" tabindex="-1">start <a class="header-anchor" href="#start" aria-label="Permalink to &quot;start&quot;">​</a></h1><h2 id="命令行工具" tabindex="-1">命令行工具 <a class="header-anchor" href="#命令行工具" aria-label="Permalink to &quot;命令行工具&quot;">​</a></h2><h3 id="rustup" tabindex="-1">rustup <a class="header-anchor" href="#rustup" aria-label="Permalink to &quot;rustup&quot;">​</a></h3><p>rustup 是 rust 的安装器，用于管理 rust 的版本和依赖关系。</p><h4 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>rustup doc</td><td>本地 rust 文档</td></tr><tr><td>rustup install</td><td>安装 rust 编译器</td></tr></tbody></table><h3 id="rustc" tabindex="-1">rustc <a class="header-anchor" href="#rustc" aria-label="Permalink to &quot;rustc&quot;">​</a></h3><p>rust 编译器</p><h4 id="常用命令-1" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令-1" aria-label="Permalink to &quot;常用命令&quot;">​</a></h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>rustc [-o 输出文件名] 源文件</td><td>生成二进制文件, 不加参数则生成同名可执行文件</td></tr><tr><td>rustc --crate-type lib 源文件</td><td>生成库文件</td></tr></tbody></table><h3 id="cargo" tabindex="-1">cargo <a class="header-anchor" href="#cargo" aria-label="Permalink to &quot;cargo&quot;">​</a></h3><p>rust 包管理工具</p><h4 id="常用命令-2" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令-2" aria-label="Permalink to &quot;常用命令&quot;">​</a></h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>cargo new [--lib] 项目名称</td><td>创建 rust 项目, 加--lib 创建库项目</td></tr><tr><td>cargo build [--release]</td><td>编译项目, 加--release 生成 release 版本,性能更好</td></tr><tr><td>cargo check</td><td>检查项目</td></tr><tr><td>cargo run</td><td>运行项目</td></tr><tr><td>cargo test</td><td>测试项目</td></tr><tr><td>cargo update</td><td>将依赖更新到最新版本，只会升级版本号最后一位的最新版本 例如 0.3.x</td></tr></tbody></table><h2 id="项目结构" tabindex="-1">项目结构 <a class="header-anchor" href="#项目结构" aria-label="Permalink to &quot;项目结构&quot;">​</a></h2><p>可执行项目</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">├── Cargo.toml</span></span>
<span class="line"><span style="color:#A6ACCD;">├── src</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── main.rs</span></span>
<span class="line"><span style="color:#A6ACCD;">│   └── lib.rs</span></span></code></pre></div><p>库项目</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">├── Cargo.toml</span></span>
<span class="line"><span style="color:#A6ACCD;">├── src</span></span>
<span class="line"><span style="color:#A6ACCD;">│   └── lib.rs</span></span></code></pre></div><h3 id="cargo-toml" tabindex="-1">Cargo.toml <a class="header-anchor" href="#cargo-toml" aria-label="Permalink to &quot;Cargo.toml&quot;">​</a></h3><p><code>[package]</code>: 项目名称版本等 <code>[dependencies]</code>: 项目所需的依赖 <code>[build_dependencies]</code>: 配置编译时所需的依赖 <code>[dev_dependencies]</code>: 配置开发时所需的依赖</p><h3 id="crate-io" tabindex="-1">crate.io <a class="header-anchor" href="#crate-io" aria-label="Permalink to &quot;crate.io&quot;">​</a></h3><p>类似 npm 可以查找第三方库, <a href="https://crates.io" target="_blank" rel="noreferrer">crate.io</a></p><p>可以使用 <code>cargo-edit</code> 插件来像 npm install 一样安装依赖, 这样就不需要手动修改 <code>Cargo.toml</code></p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">cargo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cargo-edit</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">cargo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">依赖名</span></span>
<span class="line"><span style="color:#FFCB6B;">cargo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">依赖名@版本</span></span>
<span class="line"><span style="color:#FFCB6B;">cargo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--dev</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">依赖名</span></span>
<span class="line"><span style="color:#FFCB6B;">cargo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">依赖名</span></span>
<span class="line"><span style="color:#FFCB6B;">cargo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">依赖名</span></span></code></pre></div><h3 id="国内源" tabindex="-1">国内源 <a class="header-anchor" href="#国内源" aria-label="Permalink to &quot;国内源&quot;">​</a></h3><p><a href="https://rsproxy.cn/" target="_blank" rel="noreferrer">rsproxy</a></p><h2 id="编辑器配置" tabindex="-1">编辑器配置 <a class="header-anchor" href="#编辑器配置" aria-label="Permalink to &quot;编辑器配置&quot;">​</a></h2><p>插件可以使用 <a href="https://github.com/fannheyward/coc-rust-analyzer" target="_blank" rel="noreferrer">coc-rust-analyzer</a>，也可以使用 <a href="https://github.com/mrcjkb/rustaceanvim" target="_blank" rel="noreferrer">rustaceanvim</a>, 但记得装 rust 的<code>rust-analyzer</code>组件</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">rustup</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">component</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rust-analyzer</span></span></code></pre></div>`,30),o=[n];function l(p,c,d,i,h,u){return t(),s("div",null,o)}const b=a(r,[["render",l]]);export{y as __pageData,b as default};
