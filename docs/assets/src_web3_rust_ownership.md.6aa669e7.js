import{_ as s,c as a,o,V as n}from"./chunks/framework.2aaf49fa.js";const h=JSON.parse('{"title":"ownership","description":"","frontmatter":{},"headers":[],"relativePath":"src/web3/rust/ownership.md","filePath":"src/web3/rust/ownership.md"}'),l={name:"src/web3/rust/ownership.md"},e=n(`<h1 id="ownership" tabindex="-1">ownership <a class="header-anchor" href="#ownership" aria-label="Permalink to &quot;ownership&quot;">​</a></h1><h2 id="copy" tabindex="-1">copy <a class="header-anchor" href="#copy" aria-label="Permalink to &quot;copy&quot;">​</a></h2><p>变量在赋值时, 如果右边是基础类型则会执行 copy 操作. 因为原值存储在 stack 中, 占用内存小.</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> a1 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> a2 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> a1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">println!</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;{</span><span style="color:#C3E88D;">a1</span><span style="color:#89DDFF;">}&quot;</span><span style="color:#89DDFF;">);</span></span></code></pre></div><h2 id="move" tabindex="-1">move <a class="header-anchor" href="#move" aria-label="Permalink to &quot;move&quot;">​</a></h2><p>如果右边是复合类型则会 move, rust 为避免二次释放内存, 数据的所有权会转移到新的变量.</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> s1 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">from</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> s2 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> s1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">println!</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;{</span><span style="color:#C3E88D;">s1</span><span style="color:#89DDFF;">}&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#676E95;font-style:italic;"> // 报错: borrow of moved value: \`s1\`, value borrowed here after move</span></span></code></pre></div><p>如果一个类型实现了 <code>Copy</code> trait 则不会 move, 而是执行 move 操作. 但如果该类型已经实现了 <code>Drop</code> trait 则不允许该类型实现 <code>Copy</code> trait.</p><p>String 实现了 clone 方法, 可以用于深拷贝</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> s1 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">from</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> s2 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> s1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clone</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#82AAFF;">println!</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;{</span><span style="color:#C3E88D;">s1</span><span style="color:#89DDFF;">}&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#676E95;font-style:italic;"> // 报错: borrow of moved value: \`s1\`, value borrowed here after move</span></span></code></pre></div><h2 id="drop" tabindex="-1">drop <a class="header-anchor" href="#drop" aria-label="Permalink to &quot;drop&quot;">​</a></h2><p>当一个变量包含 <code>heap</code> 数据, 其离开作用域时就会自动被 drop 函数清除</p><h2 id="引用和借用" tabindex="-1">引用和借用 <a class="header-anchor" href="#引用和借用" aria-label="Permalink to &quot;引用和借用&quot;">​</a></h2><p><strong>引用</strong>指的是对一个变量的引用, 其并没有获取数据的实际所有权, 把引用作为函数参数这个行为叫做<strong>借用</strong></p>`,14),p=[e];function t(r,c,D,i,F,y){return o(),a("div",null,p)}const u=s(l,[["render",t]]);export{h as __pageData,u as default};
