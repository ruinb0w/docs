import{_ as s,c as a,o as t,V as o}from"./chunks/framework.2aaf49fa.js";const E=JSON.parse('{"title":"Docker File","description":"","frontmatter":{},"headers":[],"relativePath":"src/maintain/docker/docker-file.md","filePath":"src/maintain/docker/docker-file.md"}'),l={name:"src/maintain/docker/docker-file.md"},n=o(`<h1 id="docker-file" tabindex="-1">Docker File <a class="header-anchor" href="#docker-file" aria-label="Permalink to &quot;Docker File&quot;">​</a></h1><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>dockerfile 可以类比为 c 的 makefile, docker 会根据 dockerfile 来构建镜像</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># dockerfile</span></span>
<span class="line"><span style="color:#FFCB6B;">FROM</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">centos</span></span>
<span class="line"><span style="color:#FFCB6B;">VOLUME</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">volume1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">, </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">volume2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">]</span></span>
<span class="line"><span style="color:#FFCB6B;">CMD</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">echo</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">CMD</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">/bin/bash</span></span></code></pre></div><p>以下为构建命令</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">build</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-f</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">dockerfile</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-t</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">镜像名[:标签]</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">.</span></span></code></pre></div><p>指定数据卷来源</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 假设我们通过上面的dockerfile创建了一个镜像</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 下面直接用创建的镜像来创建容器, 会自动生成两个卷, volume1和volume2</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">run</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-d</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--name=rocky1</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">my-rocky</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 下面我们使用--volumes-from来指定我们的数据卷来源是rocky1, 这样就不会重复生成新的卷, 并且两个容器可以共用数据卷</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">run</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-d</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--name=rocky2</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--volumes-from=rocky1</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">my-rocky</span></span></code></pre></div><h3 id="docker-file-命令" tabindex="-1">docker file 命令 <a class="header-anchor" href="#docker-file-命令" aria-label="Permalink to &quot;docker file 命令&quot;">​</a></h3><blockquote><p>dockerfile 通过#来编写注释</p></blockquote><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>FROM</td><td>基础镜像</td></tr><tr><td>MAINTAINER</td><td>镜像维护者信息, 一般是名字+邮箱</td></tr><tr><td>RUN</td><td>构建时需要执行的命令, 命令是 FROM 镜像容器中执行的</td></tr><tr><td>ADD</td><td>添加文件到镜像, 会自动解压 tar.gz</td></tr><tr><td>WORKDIR</td><td>镜像的工作目录</td></tr><tr><td>VOLUME</td><td>要挂载的卷</td></tr><tr><td>EXPOSE</td><td>暴露端口</td></tr><tr><td>CMD</td><td>容器运行时要执行的命令, 用户在 run 时容易覆盖</td></tr><tr><td>ENTRYPOINT</td><td>容器运行时要执行的命令, 用户需要使用--entrypoint 来进行覆盖</td></tr><tr><td>ENV</td><td>设置环境变量</td></tr><tr><td>COPY</td><td>类似 ADD, 不会自动解压 tar.gz</td></tr></tbody></table>`,11),e=[n];function p(r,c,d,i,y,D){return t(),a("div",null,e)}const h=s(l,[["render",p]]);export{E as __pageData,h as default};
