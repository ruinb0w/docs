import{_ as s,c as a,o as l,V as n}from"./chunks/framework.e5c4830d.js";const A=JSON.parse('{"title":"镜像和容器","description":"","frontmatter":{},"headers":[],"relativePath":"src/maintain/docker/image-container.md","filePath":"src/maintain/docker/image-container.md"}'),e={name:"src/maintain/docker/image-container.md"},o=n(`<h1 id="镜像和容器" tabindex="-1">镜像和容器 <a class="header-anchor" href="#镜像和容器" aria-label="Permalink to &quot;镜像和容器&quot;">​</a></h1><h2 id="镜像" tabindex="-1">镜像 <a class="header-anchor" href="#镜像" aria-label="Permalink to &quot;镜像&quot;">​</a></h2><h3 id="查看本地镜像" tabindex="-1">查看本地镜像 <a class="header-anchor" href="#查看本地镜像" aria-label="Permalink to &quot;查看本地镜像&quot;">​</a></h3><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">images</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># REPOSITORY   TAG       IMAGE ID       CREATED      SIZE</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># node         latest    3d8ab8fd7e2a   6 days ago   998MB</span></span></code></pre></div><h3 id="下载镜像" tabindex="-1">下载镜像 <a class="header-anchor" href="#下载镜像" aria-label="Permalink to &quot;下载镜像&quot;">​</a></h3><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># docker pull 镜像名[:版本,默认latest]</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pull</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">node:18</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#18: Pulling from library/node</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#bbeef03cda1f: Already exists</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#f049f75f014e: Already exists</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#56261d0e6b05: Already exists</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#9bd150679dbd: Already exists</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#5b282ee9da04: Already exists</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#8bc43c905b24: Already exists</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#5201db2cd6c6: Pull complete</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#2a7091f85153: Pull complete</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#2bcce6ea6105: Pull complete</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#Digest: sha256:d871edd5b68105ebcbfcde3fe8c79d24cbdbb30430d9bd6251c57c56c7bd7646</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#Status: Downloaded newer image for node:18</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#docker.io/library/node:18</span></span></code></pre></div><p>摘要上面可以看到有很多 hash 字段, 其表示镜像的某一层. 有些层后面是<strong>Already exists</strong>有些是<strong>Pull complete</strong>这是由于我有别的版本的 node, 而他们有一部分的层是相同的, 故而可以共用, 从而减少磁盘占用. 而这样的减少资源占用的模式称为联合文件系统.</p><h3 id="删除镜像" tabindex="-1">删除镜像 <a class="header-anchor" href="#删除镜像" aria-label="Permalink to &quot;删除镜像&quot;">​</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rmi</span><span style="color:#A6ACCD;"> [镜像id]+</span></span></code></pre></div><h3 id="封装镜像" tabindex="-1">封装镜像 <a class="header-anchor" href="#封装镜像" aria-label="Permalink to &quot;封装镜像&quot;">​</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commit</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">描述</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-a</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">作者</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">容器id</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">镜像名:tag</span></span></code></pre></div><h2 id="容器" tabindex="-1">容器 <a class="header-anchor" href="#容器" aria-label="Permalink to &quot;容器&quot;">​</a></h2><h3 id="创建并执行容器" tabindex="-1">创建并执行容器 <a class="header-anchor" href="#创建并执行容器" aria-label="Permalink to &quot;创建并执行容器&quot;">​</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> [选项] 镜像 </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">镜像命令</span><span style="color:#89DDFF;">]</span></span></code></pre></div><p>选项</p><ul><li><code>--name</code> 容器名称</li><li><code>-d</code> 后台运行</li><li><code>-it</code> 使用交互方式运行 <ul><li>默认通过 exit 退出交互模式的容器时容器会终止, 可以通过 Ctrl + P + Q 来避免退出时容器终止</li></ul></li><li><code>-p</code> 端口映射 <ul><li>主机端口:容器端口</li><li>容器端口</li></ul></li><li><code>-P</code> 映射容器暴露的所有端口到本地的随机端口</li><li><code>--rm</code> 容器停止时自动删除容器</li><li><code>-v</code> 挂载本地卷 <strong>主机路径:容器路径</strong></li><li><code>--net</code> 指定网络, 默认是 bridge 模式</li></ul><blockquote><p>需要注意, 如果创建一个容器, 但是这个容器没有需要处理的程序则会自动结束</p></blockquote><h3 id="查看容器状态" tabindex="-1">查看容器状态 <a class="header-anchor" href="#查看容器状态" aria-label="Permalink to &quot;查看容器状态&quot;">​</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ps</span><span style="color:#A6ACCD;"> [选项]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 默认显示当前运行的容器</span></span></code></pre></div><p>选项</p><ul><li>-a 显示所有容器, 包括不在运行的容器</li></ul><h3 id="删除容器" tabindex="-1">删除容器 <a class="header-anchor" href="#删除容器" aria-label="Permalink to &quot;删除容器&quot;">​</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rm</span><span style="color:#A6ACCD;"> [容器id]+</span></span></code></pre></div><h3 id="启动和停止容器" tabindex="-1">启动和停止容器 <a class="header-anchor" href="#启动和停止容器" aria-label="Permalink to &quot;启动和停止容器&quot;">​</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">start</span><span style="color:#A6ACCD;"> [选项] 容器id</span></span></code></pre></div><p>选项</p><ul><li><code>-i</code> 以交互模式启动容器</li></ul><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stop</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">容器id</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">restart</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">容器id</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">kill</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">容器id</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 强制停止</span></span></code></pre></div><h3 id="日志" tabindex="-1">日志 <a class="header-anchor" href="#日志" aria-label="Permalink to &quot;日志&quot;">​</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">logs</span><span style="color:#A6ACCD;"> [选项] 容器id</span></span></code></pre></div><p>选项</p><ul><li><code>--tail 行数</code> 显示日志最后 n 行</li></ul><h3 id="查看容器进程" tabindex="-1">查看容器进程 <a class="header-anchor" href="#查看容器进程" aria-label="Permalink to &quot;查看容器进程&quot;">​</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">top</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">容器id</span></span></code></pre></div><h3 id="查看容器详情" tabindex="-1">查看容器详情 <a class="header-anchor" href="#查看容器详情" aria-label="Permalink to &quot;查看容器详情&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">docker inspect 容器id</span></span></code></pre></div><h3 id="进入正在执行的容器" tabindex="-1">进入正在执行的容器 <a class="header-anchor" href="#进入正在执行的容器" aria-label="Permalink to &quot;进入正在执行的容器&quot;">​</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 进入容器并开启新终端</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">exec</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-it</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">容器id</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">命令</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#进入容器当前的终端</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">attach</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">容器id</span></span></code></pre></div><h3 id="复制文件" tabindex="-1">复制文件 <a class="header-anchor" href="#复制文件" aria-label="Permalink to &quot;复制文件&quot;">​</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker:路径</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">主机路径</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">主机路径</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker:路径</span></span></code></pre></div>`,40),p=[o];function t(c,i,r,d,y,C){return l(),a("div",null,p)}const u=s(e,[["render",t]]);export{A as __pageData,u as default};
